Creating a Vault in Terraform and storing AWS IAM user Credentials

Prerequisites
‚Ä¢	Terraform installed (v1.0+).
‚Ä¢	Vault CLI must be installed.
‚Ä¢	Vault server must be running and accessible.
‚Ä¢	AWS IAM user access key and secret.

1.	Terraform installed (v1.0+)
Script: terraform.sh
#!/bin/bash
wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
sleep 2
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
sleep 2
sudo apt update && sudo apt install terraform -y
terraform --version

2.	Vault CLI must be installed
Script: vault_cli.sh
#!/bin/bash
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
sudo tee /etc/apt/sources.list.d/hashicorp.list

sudo apt update && sudo apt install vault

3.	Vault server must be running and accessible
Bash script to automate the setup of Vault in dev mode and store your AWS IAM credentials under a KV v2 path (awscreds/terraform).
Script: vault_setup.sh

#!/bin/bash

# === START VAULT DEV SERVER ===
echo "Starting Vault in dev mode..."

# Kill any existing Vault server
pkill vault 2>/dev/null

# Start a new dev server and capture the root token
VAULT_DEV_LOG="vault.log"
nohup vault server -dev > "$VAULT_DEV_LOG" 2>&1 &
sleep 3

# Extract the root token from the dev server log
VAULT_TOKEN=$(grep -m 1 'Root Token:' "$VAULT_DEV_LOG" | awk '{print $NF}')
export VAULT_TOKEN
export VAULT_ADDR="http://127.0.0.1:8200"

echo "‚úÖ Vault is running at $VAULT_ADDR"
echo "üîê Vault Token: $VAULT_TOKEN"

# === ENABLE KV SECRETS ENGINE (v2) ===
vault secrets enable -path=awscreds kv-v2 || echo "üîÅ KV engine already enabled."

# === STORE AWS IAM CREDENTIALS IN VAULT ===
AWS_ACCESS_KEY="AKIA6IWCNKHEWC6NLZNI"
AWS_SECRET_KEY="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"

vault kv put awscreds/terraform \
  AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY" \
  AWS_SECRET_ACCESS_KEY="$AWS_SECRET_KEY"

# === VERIFY VAULT ENTRY ===
echo "‚úÖ Stored AWS credentials. Retrieving:"
vault kv get awscreds/terraform

# === use fixed token every time ===
vault server -dev -dev-root-token-id="root"

# === Export the Token ===
export VAULT_TOKEN=root


How to Use
1.	Replace "<YOUR_AWS_ACCESS_KEY>" and "<YOUR_AWS_SECRET_KEY>" with your actual credentials.
2.	Save the file as vault_setup.sh.
3.	Make it executable: chmod +x vault_setup.sh
4.	Run it: sh vault_setup.sh



terraform.tf

	terraform {
	 required_providers {
	  aws = {
	   source  = "hashicorp/aws"
	   version = "~> 5.0"
	  }
	  vault = {
	   source  = "hashicorp/vault"
	   version = "~> 3.0"
	  }
	 }
     required_version = ">= 1.0.0"
	}

providers.tf

	provider "vault" {
	 address = "http://127.0.0.1:8200"
	}

	provider "aws" {
	 region     = "us-east-2"
	 access_key = data.vault_kv_secret_v2.aws_creds.data["AWS_ACCESS_KEY_ID"]
	 secret_key = data.vault_kv_secret_v2.aws_creds.data["AWS_SECRET_ACCESS_KEY"]
	}
	
data.tf

	data "vault_kv_secret_v2" "aws_creds" {
	 mount = "awscreds"
	 name  = "terraform"
	}
	
resource.tf

	resource "aws_s3_bucket" "example" {
	 bucket = "vault-tf-bkt-1"
	 acl    = "private"
	}
