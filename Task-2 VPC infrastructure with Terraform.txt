VPC Infrastructure with Terraform
Custom VPC infrastructure with:
•	VPC
•	Internet Gateway
•	Public Subnet (with route to IGW)
•	Private Subnet (with route through NAT)
•	NAT Gateway
•	Route Tables (public & private)
•	EC2 instance in public subnet
•	EC2 instance in private subnet
•	Security Group to allow SSH & HTTP
•	Bastion Host in the public subnet to SSH into the private EC2
•	User Data to install Apache on both EC2 instances


main.tf
provider "aws" {
  region = "us-east-1"
}

# VPC
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = { Name = "main-vpc" }
}

# Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id
  tags = { Name = "main-igw" }
}

# Subnets
resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.public_subnet_cidr
  availability_zone       = var.az
  map_public_ip_on_launch = true
  tags = { Name = "public-subnet" }
}

resource "aws_subnet" "private" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.private_subnet_cidr
  availability_zone = var.az
  tags = { Name = "private-subnet" }
}

# Elastic IP & NAT Gateway
resource "aws_eip" "nat_eip" {
  vpc = true
  depends_on = [aws_internet_gateway.igw]
}

resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public.id
  tags = { Name = "main-nat" }
}

# Route Tables
resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = { Name = "public-rt" }
}

resource "aws_route_table_association" "public_assoc" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_route_table" "private_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat.id
  }

  tags = { Name = "private-rt" }
}

resource "aws_route_table_association" "private_assoc" {
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.private_rt.id
}

# Security Groups
resource "aws_security_group" "web_sg" {
  name        = "web-sg"
  description = "Allow SSH & HTTP"
  vpc_id      = aws_vpc.main.id

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # You can restrict this later
  }

  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = { Name = "web-sg" }
}

# Bastion Host (Public EC2)
resource "aws_instance" "bastion" {
  ami                         = var.ami_id
  instance_type               = "t2.micro"
  subnet_id                   = aws_subnet.public.id
  vpc_security_group_ids      = [aws_security_group.web_sg.id]
  associate_public_ip_address = true
  key_name                    = var.key_name

  tags = { Name = "Bastion-Host" }

  user_data = <<-EOF
              #!/bin/bash
              apt-get update -y
              apt-get install -y apache2
              systemctl start apache2
              systemctl enable apache2
              EOF
}

# Public EC2
resource "aws_instance" "public_ec2" {
  ami                         = var.ami_id
  instance_type               = "t2.micro"
  subnet_id                   = aws_subnet.public.id
  vpc_security_group_ids      = [aws_security_group.web_sg.id]
  associate_public_ip_address = true
  key_name                    = var.key_name

  tags = { Name = "Public-Web-Instance" }

  user_data = <<-EOF
              #!/bin/bash
              apt-get update -y
              apt-get install -y apache2
              systemctl start apache2
              systemctl enable apache2
              EOF
}

# Private EC2
resource "aws_instance" "private_ec2" {
  ami                    = var.ami_id
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.private.id
  vpc_security_group_ids = [aws_security_group.web_sg.id]
  key_name               = var.key_name

  tags = { Name = "Private-Web-Instance" }

  user_data = <<-EOF
              #!/bin/bash
              apt-get update -y
              apt-get install -y apache2
              systemctl start apache2
              systemctl enable apache2
              EOF
}


variables.tf
variable "vpc_cidr" {
  default = "10.0.0.0/16"
}

variable "public_subnet_cidr" {
  default = "10.0.1.0/24"
}

variable "private_subnet_cidr" {
  default = "10.0.2.0/24"
}

variable "az" {
  default = "us-east-1a"
}

variable "ami_id" {
  description = "Ubuntu 22.04 AMI ID"
  default     = "ami-0c02fb55956c7d316"
}

variable "key_name" {
  description = "Your AWS EC2 key pair name"
  default     = "your-key-name" # 🔁 Replace with actual
}


outputs.tf
output "summary" {
  value = {
    vpc_id              = aws_vpc.main.id
    public_subnet_id    = aws_subnet.public.id
    private_subnet_id   = aws_subnet.private.id
    public_route_table_id = aws_route_table.public_rt.id
    private_route_table_id = aws_route_table.private_rt.id
    public_route_table_association_id = aws_route_table_association.private_assoc.id
    private_route_table_association_id = aws_route_table_association.public_assoc.id
    internet_gateway_id = aws_internet_gateway.igw.id
    elastic_ip          = aws_eip.nat_eip.id
    nat_gateway_id      = aws_nat_gateway.nat.id
    security_group_id   = aws_security_group.web_sg.id
  }
}


Outputs:

summary = {
  "elastic_ip" = "eipalloc-08fedc14ab97759b6"
  "internet_gateway_id" = "igw-03b7f592993366182"
  "nat_gateway_id" = "nat-097ea4d9938ddbbc3"
  "private_route_table_association_id" = "rtbassoc-0d100ff2ed2e34ced"
  "private_route_table_id" = "rtb-0818c38a2b80db6e8"
  "private_subnet_id" = "subnet-0c3a4165491e4abdf"
  "public_route_table_association_id" = "rtbassoc-051e7a7e30b395c8d"
  "public_route_table_id" = "rtb-0cb2a881ce2cce085"
  "public_subnet_id" = "subnet-0ea1d235b97ab8c44"
  "security_group_id" = "sg-03b5d760fbefe255b"
  "vpc_id" = "vpc-02c3e74018c7945f2"
}

Now, delete the terraform.tfstate and again revert back with “import” command.
terraform init
terraform import aws_vpc.main vpc-02c3e74018c7945f2
terraform import aws_subnet.public subnet-0ea1d235b97ab8c44
terraform import aws_subnet.private subnet-0c3a4165491e4abdf
terraform import aws_route_table.public_rt rtb-0cb2a881ce2cce085
terraform import aws_route_table.private_rt rtb-0818c38a2b80db6e8
terraform import aws_route_table_association.private_assoc rtbassoc-0d100ff2ed2e34ced
terraform import aws_route_table_association.public_assoc rtbassoc-051e7a7e30b395c8d
terraform import aws_internet_gateway.igw igw-03b7f592993366182
terraform import aws_eip.nat_eip eipalloc-08fedc14ab97759b6
terraform import aws_nat_gateway.nat nat-097ea4d9938ddbbc3
terraform import aws_security_group.web_sg sg-03b5d760fbefe255b
